[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tiago Monteiro-Henriques. Author, maintainer. Jorge Orestes Cerdeira. Author. Fundação para Ciência e Tecnologia, Portugal. Funder.           <https://www.fct.pt/>","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Monteiro-Henriques T, Cerdeira J (2025). diffval: Vegetation Patterns. R package version 1.1.0.9002, https://point-veg.gitlab.io/diffval/.","code":"@Manual{,   title = {diffval: Vegetation Patterns},   author = {Tiago Monteiro-Henriques and Jorge Orestes Cerdeira},   year = {2025},   note = {R package version 1.1.0.9002},   url = {https://point-veg.gitlab.io/diffval/}, }"},{"path":"/index.html","id":"diffval","dir":"","previous_headings":"","what":"Vegetation Patterns","title":"Vegetation Patterns","text":"Find, visualize explore patterns differential taxa vegetation data (namely phytosociological table), using Differential Value (DiffVal). DiffVal captures degree exclusiveness taxon different clusters relevés sorted phytosociological table. patterns differential taxa searched mathematical optimization algorithms, resorting table maximizing sum DiffVal taxa table, .e., maximizing Total Differential Value (TotDiffVal/TDV). Ultimately, TDV-optimization aims obtaining classifications vegetation data based differential taxa, traditional phytosociological (geobotanical) approach (Monteiro-Henriques 2025, https://doi.org/10.3897/VCS.140466). Gurobi optimizer, well R package ‘gurobi’, can installed https://www.gurobi.com/products/gurobi-optimizer/. vignette “Gurobi Installation Guide”, package ‘prioritizr’, useful can found : https://prioritizr.net/articles/gurobi_installation_guide.html.","code":""},{"path":"/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"Vegetation Patterns","text":"package provides several mathematical approaches maximizing TDV. Finding partition kk subsets maximizes TDV NP-hard fixed kk. case k=2k=2, integer linear programming formulations implemented optim_tdv_gurobi_k_2(), allowing optimal solutions obtained moderately sized data sets. larger data sets k>2k>2, (meta)heuristic algorithms available: greedy randomized adaptive search procedure (GRASP), simulated annealing approach, hill climbing approach. Good-quality partitions can often achieved running simulated annealing algorithm initialized solutions obtained GRASP (implemented function optim_tdv_simul_anne()). function partition_tdv_grasp() implements GRASP . hill climbing approach, possible advisable combine first stage stochastic hill climbing followed second stage greedy hill climbing (see Monteiro-Henriques 2025). implemented function optim_tdv_hill_climb(). Multiple runs approach explore solution space broadly, allowing global optimization also recording local optima, can relevant understanding data set’s structure (see Monteiro-Henriques 2025). large instances, (meta)heuristics may become computationally expensive. cases, alternative use function partition_tdv_grdtp(), implements simplified version greedy algorithm. function performs faster optim_tdv_simul_anne() optim_tdv_hill_climb(), albeit expense quality solutions produced.","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Vegetation Patterns","text":"TMH funded European Social Fund (POCH NORTE 2020) National Funds (MCTES), FCT – Fundação para Ciência e Tecnologia (Portuguese Foundation Science Technology) postdoctoral fellowship (SFRH/BPD/115057/2016), well National Funds, foundation, project UIDB/04033/2020 (CITAB - Centre Research Technology Agro-Environmental Biological Sciences). JOC financially supported FCT projects UIDB/MAT/00297/2020, UIDP/MAT/00297/2020 (Centro de Matemática e Aplicações).","code":""},{"path":"/index.html","id":"related-articles","dir":"","previous_headings":"","what":"Related articles","title":"Vegetation Patterns","text":"Monteiro-Henriques T 2025. TDV-optimization: novel numerical method phytosociological tabulation. Vegetation Classification Survey 6: 99-127. DOI: https://doi.org/10.3897/VCS.140466 Portela-Pereira E, Monteiro-Henriques T, Casas C, Forner N, Garcia-Cabral , Fonseca JP & Neto C 2021. Teixedos noroeste da Península Ibérica. Finisterra LVI(117): 127–150. DOI: 10.18055/FINIS18102 https://revistas.rcaap.pt/finisterra/article/view/18102","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vegetation Patterns","text":"can install development version package GitLab.","code":"remotes::install_gitlab(\"point-veg/diffval\")"},{"path":"/reference/bigdata_tdv.html","id":null,"dir":"Reference","previous_headings":"","what":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"Given big phytosociological data set represented list, partition relevés list, function calculates respective Total Differential Value (TDV).","code":""},{"path":"/reference/bigdata_tdv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"","code":"bigdata_tdv(   phyto_list,   p,   n_rel,   output_type = \"normal\",   parallel = FALSE,   mc_cores = getOption(\"mc.cores\", 2L) )"},{"path":"/reference/bigdata_tdv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"phyto_list list. light representation usual phytosociological table, registering taxa presences. component uniquely represent taxon contain vector (numeric values) relevé(s) id(s) taxon observed. Relevé's ids expected represented consecutive integers, starting 1. components list might named (e.g. using taxon name) empty (decreasing memory burden). However, output_type == \"normal\" taxa names useful output interpretation. p vector integer numbers partition relevés (.e., k-partition, consisting vector values 1 k, length equal number relevés phyto_list, ascribing relevé one k groups). n_rel number relevés phyto_list, obtained, example, using instruction length(unique(unlist(phyto_list))). output_type character determining amount information returned function also amount pre-validations. Possible values \"normal\" (default) \"fast\". parallel Logical. function parallel::mclapply()) used improve computation time forking? available Windows. Refer function manual information. Defaults FALSE. mc_cores number cores passed parallel::mclapply() parallel = TRUE. See parallel::mclapply() information.","code":""},{"path":"/reference/bigdata_tdv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"output_type = \"normal\" (default) pre-validations done (can take time) list returned, following components (see tdv() mathematical notation): ifp matrix \\(\\frac{}{b}\\) values taxon group, short called 'inner frequency presences'. ofda matrix \\(\\frac{c}{d}\\) values taxon group, short called 'outer frequency differentiating absences'. e vector \\(e\\) values taxon, .e., number groups containing taxon. diffval matrix \\(DiffVal\\) taxon. tdv numeric TDV matrix m_bin, given partition p. output_type = \"fast\", TDV returned pre-validations done.","code":""},{"path":"/reference/bigdata_tdv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"function accepts list (phyto_list) representing phytosociological data set, well k-partition relevés (p), returning corresponding TDV (see tdv() explanation TDV). Partition p gives group relevé ascribed, increasing order relevé id. Big phytosociological tables can occupy significant amount computer memory, mostly relate fact absences (usually frequent presences) also recorded memory. use list, focusing presences, reduces significantly amount needed memory store information phytosociological table contains also computation time TDV, allowing computations big data sets.","code":""},{"path":"/reference/bigdata_tdv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/bigdata_tdv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Total Differential Value of a big phytosociological data set — bigdata_tdv","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Creating a group partition, as the one presented in the original article of # the data set groups <- rep(c(1, 2, 3), c(3, 11, 19))  # Removing taxa occurring in only one relevé, in order to reproduce exactly # the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Calculating TDV using tdv() tdv(taxus_bin_wmt, groups)$tdv #> [1] 0.1958471  # Converting from the phytosociologic matrix format to the list format taxus_phyto_list <- apply(taxus_bin_wmt, 1, function(x) which(as.logical(x)))  # Getting the number of relevés in the list n_rel <- length(unique(unlist(taxus_phyto_list)))  # Calculating TDV using bigdata_tdv(), even if this is not a big matrix bigdata_tdv(   phyto_list = taxus_phyto_list,   p = groups,   n_rel = n_rel,   output_type = \"normal\" )$tdv #> [1] 0.1958471"},{"path":"/reference/diffval-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diffval: Vegetation Patterns — diffval-package","title":"diffval: Vegetation Patterns — diffval-package","text":"Find, visualize explore patterns differential taxa vegetation data (namely phytosociological table), using Differential Value (DiffVal). Patterns searched mathematical optimization algorithms. Ultimately, Total Differential Value (TDV) optimization aims obtaining classifications vegetation data based differential taxa, traditional geobotanical approach (Monteiro-Henriques 2025, https://doi.org/10.3897/VCS.140466). Gurobi optimizer, well R package 'gurobi', can installed https://www.gurobi.com/products/gurobi-optimizer/. useful vignette Gurobi Installation Guide, package 'prioritizr', can found : https://prioritizr.net/articles/gurobi_installation_guide.html.","code":""},{"path":[]},{"path":"/reference/diffval-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"diffval: Vegetation Patterns — diffval-package","text":"Maintainer: Tiago Monteiro-Henriques tmh.dev@icloud.com (ORCID) Authors: Jorge Orestes Cerdeira (ORCID) contributors: Fundação para Ciência e Tecnologia, Portugal (<https://www.fct.pt/>) [funder]","code":""},{"path":"/reference/explore_tabulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"function plots interactive image tabulation.","code":""},{"path":"/reference/explore_tabulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"","code":"explore_tabulation(tab, palette = \"Vik\")"},{"path":"/reference/explore_tabulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"tab list returned tabulation() function. palette character name colour palette (one grDevices::hcl.pals() passed grDevices::hcl.colors(). Defaults \"Vik\".","code":""},{"path":"/reference/explore_tabulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"Returns invisibly, although prints taxa names console upon user click figure.","code":""},{"path":"/reference/explore_tabulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"function explore.tabulation accepts object returned tabulation() function, plotting condensed image respective tabulated matrix, permitting user click coloured blocks receive respective list taxa names console.","code":""},{"path":"/reference/explore_tabulation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/explore_tabulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively explore a tabulation of a phytosociological matrix — explore_tabulation","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin) # Creating a group partition, as presented in the original article of # the data set groups <- rep(c(1, 2, 3), c(3, 11, 19))  # Removing taxa occurring in only one relevé in order to # reproduce exactly the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Sorts the phytosociological table, putting exclusive taxa at the top and # plots an image of it tabul <- tabulation(   m_bin = taxus_bin_wmt,   p = groups,   taxa_names = rownames(taxus_bin_wmt),   plot_im = \"normal\",   palette = \"Zissou 1\" )   # This creates an interactive plot (where you can click) if (interactive()) {   explore_tabulation(tabul, palette = \"Zissou 1\") }"},{"path":"/reference/identical_partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Do the vectors represent the same k-partition? — identical_partition","title":"Do the vectors represent the same k-partition? — identical_partition","text":"Checks two vectors represent k-partition.","code":""},{"path":"/reference/identical_partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do the vectors represent the same k-partition? — identical_partition","text":"","code":"identical_partition(p1, p2)"},{"path":"/reference/identical_partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do the vectors represent the same k-partition? — identical_partition","text":"p1 vector integers representing k-partition (taking values 1 k), length p2. p2 vector integers representing k-partition (taking values 1 k), length p1.","code":""},{"path":"/reference/identical_partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do the vectors represent the same k-partition? — identical_partition","text":"TRUE p1and p2 represent k-partitions; FALSE otherwise.","code":""},{"path":"/reference/identical_partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Do the vectors represent the same k-partition? — identical_partition","text":"Parameters p1and p2are vectors indicating group membership. package context, vectors many elements columns phytosociological table, indicating group membership relevé one k groups (.e., k-partition). function checks two given vectors p1and p2 correspond, practice, k-partition, .e., relevé groups actually , group numbers somehow swapped.","code":""},{"path":"/reference/identical_partition.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Do the vectors represent the same k-partition? — identical_partition","text":"Tiago Monteiro-Henriques Jorge Orestes Cerdeira. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/identical_partition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do the vectors represent the same k-partition? — identical_partition","text":"","code":"# Creating three 2-partitions par1 <- c(1, 1, 2, 2, 2) par2 <- c(2, 2, 1, 1, 1) par3 <- c(1, 1, 1, 2, 2)  # Is it the same partition? identical_partition(par1, par2) # TRUE #> [1] TRUE identical_partition(par1, par3) # FALSE #> [1] FALSE identical_partition(par2, par3) # FALSE #> [1] FALSE"},{"path":"/reference/internal_assignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the internal assignment of a given classification — internal_assignment","title":"Check the internal assignment of a given classification — internal_assignment","text":"Given phytosociological table partition columns, function checks internal assignment relevés groups, based  presence taxa exclusive group (group combination) defined partition, distinguishing relevés assigned unambiguously group ambiguity.","code":""},{"path":"/reference/internal_assignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the internal assignment of a given classification — internal_assignment","text":"","code":"internal_assignment(m_bin, p)"},{"path":"/reference/internal_assignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the internal assignment of a given classification — internal_assignment","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. p vector integer numbers partition relevés (.e., k-partition, consisting vector values 1 k, length equal number columns m_bin, ascribing relevé one k groups).","code":""},{"path":"/reference/internal_assignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the internal assignment of a given classification — internal_assignment","text":"list following components: rel_ambiguous_assign vector containing names relevés ambiguous assignment. possible_assignments data frame possible assignments ambiguously assigned relevés. iap internal assignment precision (IAP), .e., proportion relevés unambiguous assignment. iaa internal assignment ambiguity (IAA), .e., proportion relevés ambiguous assignment (IAA = 1 - IAP).","code":""},{"path":"/reference/internal_assignment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the internal assignment of a given classification — internal_assignment","text":"function accepts phytosociological table (m_bin) k-partition columns (p), assesses relevés assigned unambiguously group . assignment relevé group considered unambiguous transferring another group alter pattern differential taxa defined p. Conversely, relevé moved different group without changing pattern, assignment considered ambiguous.","code":""},{"path":"/reference/internal_assignment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the internal assignment of a given classification — internal_assignment","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/internal_assignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the internal assignment of a given classification — internal_assignment","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Creating some group partitions groups1 <- rep(c(1, 2, 3), c(3, 11, 19)) set.seed(1) groups2 <- sample(rep(c(1, 2, 3), c(3, 11, 19)))  # In this case, all relevés are unambiguously assigned to a group internal_assignment(taxus_bin, groups1) #> $releves_with_ambiguous_assignment #> character(0) #>  #> $possible_assignments_of_ambiguous_releves #> [1] groups #> <0 rows> (or 0-length row.names) #>  #> $iap #> [1] 1 #>  #> $iaa #> [1] 0 #>   # In this other case, some relevés could be moved to a different group, as # their assignment is ambiguous internal_assignment(taxus_bin, groups2) #> $releves_with_ambiguous_assignment #> [1] \"OR03\"  \"SAN02\" \"SAN03\" \"SAN04\" #>  #> $possible_assignments_of_ambiguous_releves #>       groups #> OR03  {2, 3} #> SAN02 {1, 3} #> SAN03 {2, 3} #> SAN04 {2, 3} #>  #> $iap #> [1] 0.8787879 #>  #> $iaa #> [1] 0.1212121 #>"},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"Given phytosociological matrix, function finds partition two groups matrix columns, maximizes Total Differential Value (TDV).","code":""},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"","code":"optim_tdv_gurobi_k_2(m_bin, formulation = \"t-dependent\", time_limit = 5)"},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. formulation character selecting formulation use. Possible values \"t-dependent\" (default) \"t-independent\". See Details. time_limit numeric (\"double\") time limit (seconds) passed parameter Gurobi, Defaults 5 seconds, see Details.","code":""},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"formulation = \"t-dependent\", list following components: status.runs character vector Gurobi output status runs. par vector 2-partition corresponding maximum TDV found Gurobi. objval numeric maximum TDV found Gurobi. formulation = \"t-independent\", list following components: status character Gurobi output status. par vector 2-partition corresponding maximum TDV found Gurobi. objval numeric maximum TDV found Gurobi.","code":""},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"Given phytosociological table m_bin (rows corresponding taxa columns corresponding relevés) function finds 2-partition (partition two groups) maximizes TDV, using Gurobi optimizer. Gurobi commercial software free academic license can obtained affiliated recognized educational institution. Package 'prioritizr' contains comprehensive vignette (Gurobi Installation Guide), can guide trough process obtaining license, installing Gurobi optimizer, activating license eventually installing R package 'gurobi'. optim_tdv_gurobi_k_2() returns, optimization successful, 2-partition global maximum TDV 2-partitions columns m_bin. See tdv() explanation Total Differential Value phytosociological table. function implements two different mixed-integer linear programming formulations problem. formulations differ one independent size obtained groups (t-independent), formulation fixes size obtained groups (t-dependent). t-dependent formulation implemented run Gurobi many times necessary cover possible group sizes; approach can result faster total computation time. medium-sized matrices computation time might become already prohibitive, thus use time limit (time_limit) advisable.","code":""},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"Jorge Orestes Cerdeira Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/optim_tdv_gurobi_k_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Differential Value optimization using Gurobi — optim_tdv_gurobi_k_2","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Obtaining the 2-partition that maximizes TDV using the Gurobi solver, by # mixed-integer linear programming if (FALSE) { # \\dontrun{ # Requires the suggested package 'gurobi' optim_tdv_gurobi_k_2(taxus_bin) } # }"},{"path":"/reference/optim_tdv_hill_climb.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"function searches partitions columns given matrix, optimizing Total Differential Value (TDV).","code":""},{"path":"/reference/optim_tdv_hill_climb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"","code":"optim_tdv_hill_climb(   m_bin,   k,   p_initial = \"random\",   n_runs = 1,   n_sol = 1,   maxit = 10,   min_g_size = 1,   stoch_first = FALSE,   stoch_neigh_size = 1,   stoch_maxit = 100,   full_output = FALSE,   verbose = FALSE )"},{"path":"/reference/optim_tdv_hill_climb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. k numeric giving number desired groups. p_initial vector character. vector integer numbers initial partition relevés (.e., vector values 1 k, length equal number columns m_bin, ascribing relevé one k groups). default, p_initial = \"random\", generates random initial partition. n_runs numeric giving number runs perform. n_sol numeric giving number best solutions keep final output. Defaults 1. maxit numeric giving number iterations Hill-climbing optimization. min_g_size numeric. minimum number relevés group can contain (must 1 higher). stoch_first logical. FALSE (default), performs Hill-climbing 1-neighbours; TRUE first, performs Stochastic Hill-climbing n-neighbours (n defined parameter stoch_neigh_size), runs Hill-climbing search 1-neighbours; see description . stoch_neigh_size numeric giving size (n) n-neighbours Stochastic Hill-climbing; used stoch_first = TRUE. Defaults 1. stoch_maxit numeric giving number iterations Stochastic Hill-climbing optimization; used stoch_first = TRUE. Defaults 100. full_output logical. FALSE (default) best n_sol partitions respective indices returned. TRUE (available n_sol = 1) output also contain information optimization steps (see ). verbose logical. FALSE nothing printed runs. TRUE, run, run number printed well indication found partition 1-neighbour local maximum.","code":""},{"path":"/reference/optim_tdv_hill_climb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"full_output = FALSE, list () n_sol best solutions (equivalent solutions removed). best solution also list following components: local_maximum logical indicating par 1-neighbour local maximum. par vector partition highest TDV obtained Hill-climbing algorithm(s). tdv numeric TDV par. full_output = TRUE, list just one component (one run ), containing also list following components: res.stoch matrix iteration number (Stochastic Hill-climbing phase), maximum TDV found iteration, TDV randomly selected n-neighbour iteration. par.stoch vector best partition found Stochastic Hill-climbing phase. tdv.stoch numeric showing maximum TDV found Stochastic Hill-climbing phase (selected). res matrix iteration number (Hill-climbing), maximum TDV found iteration, highest TDV among 1-neighbours. local_maximum logical indicating par 1-neighbour local maximum. par vector partition highest TDV obtained Hill-climbing algorithm(s). tdv numeric TDV par.","code":""},{"path":"/reference/optim_tdv_hill_climb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"Given phytosociological table (m_bin, rows corresponding taxa columns corresponding relevés) function searches k-partition (k defined user) optimizing TDV, .e., searches, using Hill-climbing algorithm, patterns differential taxa rearranging relevés k groups. optimization can start random partition (p_ini = \"random\"), given partition (p_ini, defined user produced clustering method, even manual classification relevés). description given , 1-neighbour given partition another partition can obtained simply changing one relevé different group. Equivalently  n-neighbour given partition another partition obtained ascribing n relevés different groups. function implements Hill-climbing algorithm, TDV improvement searched iteration, screening 1-neighbours, given number maximum iterations (maxit) reached. maxit reached TDV improvement possible among 1-neighbours currently best partition, search halted current partition tagged local maximum outputted. screening 1-neighbours might computationally heavy, specially analyzing big tables, optionally, Stochastic Hill-climbing search can performed first step (stoch_first = TRUE). consists searching TDV improvements, randomly selecting, iteration, one n-neighbour (n defined user parameter stoch_neigh_size), accepting n-neighbour partition immediately improves TDV. repeated given number iterations (stoch_maxit) reached. Specially starting random partitions, Stochastic Hill-climbing intended increase TDV without computational burden full neighbourhood screening, can done afterwards, second step. Hill-climbing combination Stochastic Hill-climbing + Hill-climbing, can run multiple times function (defined n_runs), consists Random-restart Hill-climbing, n_sol best solutions kept returned. Hill-climbing algorithm converges easily local maxima, several runs function (.e., multiple random starts) advised. Trimming table 'constancy' range using result cluster methodologies input, might help finding interesting partitions. However, trimming table narrow 'constancy' range, getting random initial partition TDV greater zero might hard; cases using initial partition partition_tdv_grasp() partition_tdv_grdtp(), even result clustering strategies, input partition might useful.","code":""},{"path":"/reference/optim_tdv_hill_climb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/optim_tdv_hill_climb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Differential Value optimization using Hill-climbing algorithms — optim_tdv_hill_climb","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Removing taxa occurring in only one relevé in order to # reproduce the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Obtaining a partition that maximizes TDV using the Stochastic Hill-climbing # and the Hill-climbing algorithms  result <- optim_tdv_hill_climb(   m_bin = taxus_bin_wmt,   k = 3,   n_runs = 7,   n_sol = 2,   min_g_size = 3,   stoch_first = TRUE,   stoch_maxit = 500,   verbose = TRUE ) #> Run number: 1 Confirmed local maximum: TRUE  #> Run number: 2 Confirmed local maximum: TRUE  #> Run number: 3 Confirmed local maximum: TRUE  #> Run number: 4 Confirmed local maximum: TRUE  #> Run number: 5 Confirmed local maximum: TRUE  #> Run number: 6 Confirmed local maximum: TRUE  #> Run number: 7 Confirmed local maximum: TRUE   # Inspect the result. The highest TDV found in the runs. result[[1]]$tdv #> [1] 0.1706285 # If result[[1]]$tdv is 0.1958471 you are probably reproducing the three # groups (Estrela, Gerês and Galicia) from the original article. If not # try again the optim_tdv_hill_climb function (maybe increasing n_runs).  # Plot the sorted (or tabulated) phytosociological table tabul1 <- tabulation(   m_bin = taxus_bin_wmt,   p = result[[1]]$par,   taxa_names = rownames(taxus_bin_wmt),   plot_im = \"normal\" )   # Plot the sorted (or tabulated) phytosociological table, also including # taxa occurring just once in the matrix tabul2 <- tabulation(   m_bin = taxus_bin,   p = result[[1]]$par,   taxa_names = rownames(taxus_bin),   plot_im = \"normal\" )"},{"path":"/reference/optim_tdv_simul_anne.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"function searches k-partitions columns given matrix (.e., partitions columns k groups), optimizing Total Differential Value (TDV) using stochastic global optimization method known Simulated Annealing (SANN) algorithm. Optionally, Greedy Randomized Adaptive Search Procedure (GRASP) can used find initial partition (seed) passed SANN algorithm.","code":""},{"path":"/reference/optim_tdv_simul_anne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"","code":"optim_tdv_simul_anne(   m_bin,   k,   p_initial = NULL,   n_runs = 10,   n_sol = 1,   t_inic = 0.3,   t_final = 1e-06,   alpha = 0.05,   n_iter = 1000,   use_grasp = TRUE,   thr = 0.95,   full_output = FALSE )"},{"path":"/reference/optim_tdv_simul_anne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. k numeric giving number desired groups. p_initial vector integer numbers partition relevés (.e., k-partition, consisting vector values 1 k, length equal number columns m_bin, ascribing relevé one k groups), used initial partition Simulated Annealing. random partition use p_initial = \"random\". argument ignored use_grasp = TRUE. n_runs numeric giving number runs. Defaults 10. n_sol numeric giving number best solutions keep final output (used full_output FALSE; full_output TRUE runs produce output). Defaults 1. t_inic numeric giving initial temperature. Must greater 0 maximum admitted value 1. Defaults 0.3. t_final numeric giving final temperature. Must bounded 0 1. Usually low values needed ensure convergence. Defaults 0.000001. alpha numeric giving fraction temperature drop used temperature reduction scheme (see Details). Must bounded 0 1. Defaults 0.05. n_iter numeric giving number iterations. Defaults 1000. use_grasp logical. Defaults TRUE. TRUE, GRASP used obtain initial partitions Simulated Annealing. FALSE user provide initial partition use use p_initial = \"random\" random one. thr numeric giving threshold value (0 1 ) probability used compute sample quantile, order get best m_bin columns select one include GRASP solution (step procedure). needed use_grasp TRUE. full_output logical. Defaults FALSE. TRUE extra information presented output. See Value.","code":""},{"path":"/reference/optim_tdv_simul_anne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"full_output = FALSE (default), list following components (GRASP component returned use_grasp = TRUE): GRASP list n_sol components, one containing also list two components: par vector partition highest TDV obtained GRASP; tdv numeric TDV par. SANN list n_sol components, one containing also list two components: par vector partition highest TDV obtained (GRASP +) SANN algorithm(s); tdv numeric TDV par. full_output = TRUE, list following components (GRASP component returned use_grasp = TRUE): GRASP list n_runs components, one containing also list two components: par vector partition highest TDV obtained GRASP. tdv numeric TDV par. SANN list n_runs components, one containing also list six components: current.tdv vector length n_iter current TDV SANN iteration. alternative.tdv vector length n_iter alternative TDV used SANN iteration. probability vector length n_iter probability used SANN iteration. temperature vector length n_iter temperature SANN iteration. par vector partition highest TDV obtained (GRASP +) SANN algorithm(s). tdv numeric TDV par.","code":""},{"path":"/reference/optim_tdv_simul_anne.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"Given phytosociological table (m_bin, rows corresponding taxa columns corresponding relevés) function searches k-partition (k, defined user) optimizing TDV, .e., searches, using SANN algorithm (optionally working upon GRASP solutions), global maximum TDV (rearranging relevés k groups). terminology cluster analysis, taxa correspond features, variables, attributes, relevés correspond objects samples. function uses two main algorithms: optional GRASP, used obtain initial solutions (partitions m_bin) using function partition_tdv_grasp(). initial solutions submitted SANN algorithm. (main) SANN algorithm, used search global maximum TDV. initial partition run SANN can partition obtained GRASP (use_grasp = TRUE) , (use_grasp = FALSE), partition given user (using p_initial) random partition (using p_initial = \"random\"). SANN algorithm decreases temperature multiplying current temperature 1 - alpha according predefined schedule, automatically calculated given values t_inic, t_final, alpha n_iter. Specifically, cooling schedule obtained calculating number times temperature decreased order approximate t_final starting t_inic. number times temperature decreases, say nt, calculated expression: floor(log(t_final / t_inic) / log(1 - alpha)). Finally, decreasing stages scattered desired iterations (n_iter) homogeneously, calculating indices iterations experience decrease temperature using floor(n_iter / nt * (1:nt)). SANN often seen exploratory technique temperature settings challenging dependent problem. function tries restrict temperature values taking account TDV always 0 1. Even though, obtaining values temperature allow convergence can challenging. full_output = TRUE allows user inspect behaviour current.tdv check convergence fails. Generally, convergence failure can spotted final SANN TDV values similar initial current.tdv, specially coming random partitions. cases, rule thumb, advisable decrease t_final factor 10.","code":""},{"path":"/reference/optim_tdv_simul_anne.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"Jorge Orestes Cerdeira Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/optim_tdv_simul_anne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Differential Value optimization using a Simulated Annealing (and GRASP) algorithm(s) — optim_tdv_simul_anne","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Removing taxa occurring in only one relevé in order to # reproduce the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Obtaining a partition that maximizes TDV using the Simulated Annealing # algorithm result <- optim_tdv_simul_anne(   m_bin = taxus_bin_wmt,   k = 3,   p_initial = \"random\",   n_runs = 5,   n_sol = 5,   use_grasp = FALSE,   full_output = TRUE )  # Inspect the result # The TDV of each run sapply(result[[\"SANN\"]], function(x) x$tdv) #> [1] 0.2005789 0.2005789 0.1958471 0.1958471 0.1699918 # The best partition that was found (i.e., with highest TDV) result[[\"SANN\"]][[1]]$par #>  [1] 3 3 3 3 2 2 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  # A TDV of 0.1958471 indicates you are probably reproducing the three # groups (Estrela, Gerês and Galicia) from the original article. A solution # with TDV = 0.2005789 might also occur, but note that one group has only two # elements. For now, a minimum group size is not implemented in function # optim_tdv_simul_anne() as it is in the function optim_tdv_hill_climb().  # Inspect how the optimization progressed (should increase towards the right) plot(   result[[\"SANN\"]][[1]]$current.tdv,   type = \"l\",   xlab = \"Iteration number\",   ylab = \"TDV of the currently accepted solution\" ) for (run in 2:length(result[[\"SANN\"]])) {   lines(result[[\"SANN\"]][[run]]$current.tdv) }   # Plot the sorted (or tabulated) phytosociological table, using the best # partition that was found tabul <- tabulation(   m_bin = taxus_bin_wmt,   p = result[[\"SANN\"]][[1]]$par,   taxa_names = rownames(taxus_bin_wmt),   plot_im = \"normal\" )"},{"path":"/reference/partition_tdv_grasp.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"function obtains partition columns given phytosociological matrix, aiming high values Total Differential Value (TDV) using GRASP algorithm.","code":""},{"path":"/reference/partition_tdv_grasp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"","code":"partition_tdv_grasp(m_bin, k, thr = 0.95, verify = TRUE)"},{"path":"/reference/partition_tdv_grasp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. k numeric giving number desired groups. thr numeric giving threshold value (0 1 ) probability used compute sample quantile, order get best m_bin columns select one include GRASP solution (step procedure). verify logical. TRUE (default) function verifies basic features m_bin data structure met. Otherwise FALSE.","code":""},{"path":"/reference/partition_tdv_grasp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"numeric vector, length number columns m_bin, numbers 1 k, representing group respective column ascribed.","code":""},{"path":"/reference/partition_tdv_grasp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"function uses Greedy Randomized Adaptive Search Procedure (GRASP) obtain partition m_bin. Given phytosociological table (m_bin, rows corresponding taxa columns corresponding relevés) function searches k-partition (k, defined user) aiming high values TDV. See tdv() explanation TDV phytosociological table. thr = 1, algorithm corresponds Greedy algorithm.","code":""},{"path":"/reference/partition_tdv_grasp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"Jorge Orestes Cerdeira Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/partition_tdv_grasp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a partition using a GRASP algorithm — partition_tdv_grasp","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Obtaining a partition based on the GRASP algorithm partition_tdv_grasp(taxus_bin, 3) #>  [1] 1 1 3 1 3 3 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"},{"path":"/reference/partition_tdv_grdtp.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"function obtains partition columns given phytosociological matrix, aiming high values Total Differential Value (TDV), implementing Greedy-type algorithm.","code":""},{"path":"/reference/partition_tdv_grdtp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"","code":"partition_tdv_grdtp(m_bin, k, verify = TRUE)"},{"path":"/reference/partition_tdv_grdtp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. k numeric giving number desired groups. verify logical. TRUE (default) function verifies basic features m_bin data structure met. Otherwise FALSE.","code":""},{"path":"/reference/partition_tdv_grdtp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"numeric vector, length number columns m_bin, numbers 1 k, representing group respective column ascribed.","code":""},{"path":"/reference/partition_tdv_grdtp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"Given phytosociological table m_bin (rows corresponding taxa columns corresponding relevés), function uses Greedy-type algorithm (simplified version Greedy algorithm) obtain k-partition (k, defined user) columns m_bin, aiming high values TDV. algorithm operates following way: Firstly, k columns selected randomly work seeds one desired k groups. Secondly, one remaining columns selected randomly added partition group maximizes upcoming TDV. second step repeated columns placed group k-partition. function expected perform faster partition_tdv_grasp(), yet returning worse partitions terms TDV. (true) Greedy algorithm see partition_tdv_grasp(). See tdv() explanation TDV phytosociological table.","code":""},{"path":"/reference/partition_tdv_grdtp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"Jorge Orestes Cerdeira Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/partition_tdv_grdtp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain a partition using a Greedy-type algorithm — partition_tdv_grdtp","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Obtaining a partiton based on a Greedy-type algorithm partition_tdv_grdtp(taxus_bin, 3) #>  [1] 2 2 2 1 1 1 1 1 1 1 1 1 1 1 3 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2"},{"path":"/reference/tabulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"function reorders phytosociological table rows using, firstly, increasing number groups taxon occurs, secondly, decreasing sum inner frequency presences taxon (see tdv()). columns also reordered, simply using increasing number respective group membership.","code":""},{"path":"/reference/tabulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"","code":"tabulation(   m_bin,   p,   taxa_names,   plot_im = NULL,   palette = \"Vik\",   greyout = TRUE,   greyout_colour = \"grey\" )"},{"path":"/reference/tabulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. p vector integer numbers partition relevés (.e., k-partition, consisting vector values 1 k, length equal number columns m_bin, ascribing relevé one k groups). taxa_names character vector (length equal number rows m_bin) taxa names. plot_im default, NULL, returns without plotting. plot_im = \"normal\", plots image tabulated matrix. plot_im = \"condensed\", plots image tabulated matrix presenting sets differential taxa solid coloured blocks. palette character name colour palette (one grDevices::hcl.pals() passed grDevices::hcl.colors(). Defaults \"Vik\". greyout logical. TRUE (default), non-differential taxa greyed (using colour defined greyout_colour). FALSE, non-differential taxa depicted respective group colours. greyout_colour character name colour use non-differential taxa. Defaults \"grey\".","code":""},{"path":"/reference/tabulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"plot_im = NULL, list following components: taxa.names given taxa_names taxa.ord vector order rows/taxa. tabulated rearranged/reordered m_bin matrix. condensed matrix used create \"condensed\" image. plot_im = \"normal\", returns list , additionally, plots image tabulated matrix. plot_im = \"condensed\", returns list , additionally, plots image tabulated matrix, presenting sets differential taxa solid coloured blocks equal width.","code":""},{"path":"/reference/tabulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"function accepts phytosociological table (m_bin), k-partition columns (p) names taxa (corresponding rows m_bin), returning rearranged/reordered matrix (plotting optionally).","code":""},{"path":"/reference/tabulation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/tabulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rearrange a phytosociological table, showing differential taxa on top — tabulation","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Creating a group partition, as presented in the original article of the # data set groups <- rep(c(1, 2, 3), c(3, 11, 19))  # Removing taxa occurring in only one relevé in order to # reproduce exactly the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Sorting the phytosociological table, putting exclusive taxa in the top and # plotting an image of it tabul <- tabulation(   m_bin = taxus_bin_wmt,   p = groups,   taxa_names = rownames(taxus_bin_wmt),   plot_im = \"normal\",   palette = \"Zissou 1\" )   # Inspect the first rows and columns of the reordered phytosociological table head(tabul$tabulated, n = c(5, 5)) #>                                              1 2 3 4 5 #> group                                        1 1 1 2 2 #> Galium aparine L.                            1 1 0 0 0 #> Genista florida L.                           1 0 1 0 0 #> Geranium lucidum L.                          1 1 0 0 0 #> Phalacrocarpum oppositifolium (Brot.) Willk. 0 1 1 0 0"},{"path":"/reference/taxus_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxus baccata forests — taxus_bin","title":"Taxus baccata forests — taxus_bin","text":"binary phytosociological table containing relevés Taxus baccata forests, northwest Iberian Peninsula.","code":""},{"path":"/reference/taxus_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxus baccata forests — taxus_bin","text":"","code":"taxus_bin"},{"path":"/reference/taxus_bin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Taxus baccata forests — taxus_bin","text":"matrix 209 rows 33 columns. column corresponds phytosociological relevé row corresponds taxon. Values matrix denote presences (1) absences (0).","code":""},{"path":"/reference/taxus_bin.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Taxus baccata forests — taxus_bin","text":"Portela-Pereira E., Monteiro-Henriques T., Casas C., Forner N., Garcia-Cabral ., Fonseca J.P. & Neto C. 2021. Teixedos noroeste da Península Ibérica. Finisterra 56(117): 127-150. doi:10.18055/FINIS18102 .","code":""},{"path":"/reference/taxus_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxus baccata forests — taxus_bin","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Inspect the first rows and columns of taxus_bin head(taxus_bin, n = c(5, 5)) #>                                                                                          EST03 #> Acer pseudoplatanus L.                                                                       1 #> Aconitum vulparia Rchb. subsp. neapolitanum (Ten.) Muñoz Garm.                               0 #> Actaea spicata L.                                                                            0 #> Adenostyles alpina (L.) Bluff & Fingerh. subsp. nebrodensis (Wagenitz & I.Müll.) Greuter     0 #> Agrostis capillaris L.                                                                       0 #>                                                                                          EST04 #> Acer pseudoplatanus L.                                                                       0 #> Aconitum vulparia Rchb. subsp. neapolitanum (Ten.) Muñoz Garm.                               0 #> Actaea spicata L.                                                                            0 #> Adenostyles alpina (L.) Bluff & Fingerh. subsp. nebrodensis (Wagenitz & I.Müll.) Greuter     0 #> Agrostis capillaris L.                                                                       0 #>                                                                                          EST05 #> Acer pseudoplatanus L.                                                                       1 #> Aconitum vulparia Rchb. subsp. neapolitanum (Ten.) Muñoz Garm.                               0 #> Actaea spicata L.                                                                            0 #> Adenostyles alpina (L.) Bluff & Fingerh. subsp. nebrodensis (Wagenitz & I.Müll.) Greuter     0 #> Agrostis capillaris L.                                                                       0 #>                                                                                          GER12 #> Acer pseudoplatanus L.                                                                       0 #> Aconitum vulparia Rchb. subsp. neapolitanum (Ten.) Muñoz Garm.                               0 #> Actaea spicata L.                                                                            0 #> Adenostyles alpina (L.) Bluff & Fingerh. subsp. nebrodensis (Wagenitz & I.Müll.) Greuter     0 #> Agrostis capillaris L.                                                                       0 #>                                                                                          GER17 #> Acer pseudoplatanus L.                                                                       0 #> Aconitum vulparia Rchb. subsp. neapolitanum (Ten.) Muñoz Garm.                               0 #> Actaea spicata L.                                                                            0 #> Adenostyles alpina (L.) Bluff & Fingerh. subsp. nebrodensis (Wagenitz & I.Müll.) Greuter     0 #> Agrostis capillaris L.                                                                       0"},{"path":"/reference/tdv.html","id":null,"dir":"Reference","previous_headings":"","what":"The Total Differential Value of a phytosociological table — tdv","title":"The Total Differential Value of a phytosociological table — tdv","text":"Given phytosociological table partition columns, function calculates respective Total Differential Value (TDV).","code":""},{"path":"/reference/tdv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Total Differential Value of a phytosociological table — tdv","text":"","code":"tdv(m_bin, p, output_type = \"normal\")"},{"path":"/reference/tdv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Total Differential Value of a phytosociological table — tdv","text":"m_bin matrix. phytosociological table 0s (absences) 1s (presences), rows correspond taxa columns correspond relevés. p vector integer numbers partition relevés (.e., k-partition, consisting vector values 1 k, length equal number columns m_bin, ascribing relevé one k groups). output_type character determining amount information returned function also amount pre-validations. Possible values \"normal\" (default), \"fast\" \"full\".","code":""},{"path":"/reference/tdv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Total Differential Value of a phytosociological table — tdv","text":"output_type = \"normal\" (default) pre-validations done list returned, following components: ifp matrix \\(\\frac{}{b}\\) values taxon group, short called 'inner frequency presences'. ofda matrix \\(\\frac{c}{d}\\) values taxon group, short called 'outer frequency differentiating absences'. e vector \\(e\\) values taxon, .e., number groups containing taxon. diffval matrix \\(DiffVal\\) taxon. tdv numeric TDV matrix m_bin, given partition p. output_type = \"full\", extra components added output: afg, empty.size, gct (= \\(e\\)) .mul. intermediate matrices used computation TDV. output_type = \"fast\", TDV returned pre-validations done.","code":""},{"path":"/reference/tdv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Total Differential Value of a phytosociological table — tdv","text":"function accepts phytosociological table (m_bin) k-partition columns (p), returning corresponding TDV (Monteiro -Henriques 2025). TDV proposed Monteiro-Henriques Bellu (2014). Monteiro-Henriques (2016) proposed TDV1, modifying TDV slightly objective ensuring value 0 1. Yet, TDV always within range. practice, TDV TDV1 0 possible minimum value 1 possible maximum value, TDV1 reduces contribution differential taxa present one group. TDV implemented , parsimony. TDV calculated using \\(DiffVal\\) index () taxa present tabulated phytosociological table \\(M\\) (also called sorted table). \\(DiffVal\\) index aims characterizing well taxon works differential taxon tabulated phytosociological table (information differential taxa see Mueller-Dombois & Ellenberg, 1974). archetypal differential taxon certain group \\(g\\) partition \\(p\\) (partition columns \\(M\\)) one present relevés group \\(g\\), absent groups partition. Therefore, \\(DiffVal\\) two components, inner one (\\(\\frac{}{b}\\)), measures presence taxon inside groups, outer one (\\(\\frac{c}{d}\\)), measures relevant absences taxon outside groups. Specifically, given partition \\(p\\) \\(k\\) groups, \\(DiffVal\\) calculated taxon \\(s\\) : $$DiffVal_{s,p} = \\frac{1}{e}\\sum_{g=1}^k{\\frac{}{b}\\frac{c}{d}}$$ : \\(\\), total number presences taxon \\(s\\) within group \\(g\\). \\(b\\), total number relevés group \\(g\\). \\(c\\), total number differentiating absences taxon \\(s\\), .e., absences coming groups \\(g\\) taxon \\(s\\) completely absent. \\(d\\), total number relevés groups \\(g\\) (.e., total number relevés table - \\(b\\)). \\(e\\), total number groups taxon \\(s\\) occurs least . Therefore, taxon \\(s\\) group \\(g\\), \\(DiffVal\\) index evaluates: \\(\\frac{}{b}\\), .e., frequency presences taxon \\(s\\), relative size group \\(g\\); commonly called 'relative frequency.' \\(\\frac{}{b}\\) 1 taxon \\(s\\) occurs relevés group \\(g\\). \\(\\frac{c}{d}\\), .e., frequency differentiating absences taxon \\(s\\) outside group \\(g\\), relative sum sizes groups \\(g\\). Nota bene: absences \\(c\\) counted outside group \\(g\\) groups taxon \\(s\\) completely absent (relevant absences, produce differentiation among groups); practice \\(c\\) corresponds sum sizes groups \\(g\\) empty. \\(\\frac{c}{d}\\) 1 taxon \\(s\\) absent groups \\(g\\). Finally, \\(\\frac{1}{e}\\) ensures \\(DiffVal\\) value 0 1. Total Differential Value (TDV \\(TotDiffVal\\)) phytosociological table \\(M\\) tabulated/sorted partition \\(p\\) : $$TDV_{M,p} = \\frac{1}{n}\\sum_{=1}^n{Diffval_{,p}}$$ : \\(n\\), number taxa table \\(M\\). division number taxa present \\(M\\) ensures TDV remains [0,1] interval (\\(DiffVal\\) also interval).","code":""},{"path":"/reference/tdv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Total Differential Value of a phytosociological table — tdv","text":"Monteiro-Henriques T, Bellu . 2014. optimization approach production differentiated tables based new differentiability measures. 23rd EVS European Vegetation Survey. Presented orally. Ljubljana, Slovenia. Monteiro-Henriques T 2016. bunch R functions assist phytosociological tabulation. 25th Meeting European Vegetation Survey. Presented poster. Rome. Italy. Monteiro-Henriques T 2025. TDV-optimization: novel numerical method phytosociological tabulation. Vegetation Classification Survey 6: 99-127. DOI: https://doi.org/10.3897/VCS.140466 Mueller-Dombois D, Ellenberg H 1974. Aims Methods Vegetation Ecology. New York: John Wiley & Sons.","code":""},{"path":"/reference/tdv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Total Differential Value of a phytosociological table — tdv","text":"Tiago Monteiro-Henriques. E-mail: tmh.dev@icloud.com.","code":""},{"path":"/reference/tdv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Total Differential Value of a phytosociological table — tdv","text":"","code":"# Getting the Taxus baccata forests data set data(taxus_bin)  # Creating a group partition, as the one presented in the original article of # the data set groups <- rep(c(1, 2, 3), c(3, 11, 19))  # Removing taxa occurring in only one relevé, in order to reproduce exactly # the example in the original article of the data set taxus_bin_wmt <- taxus_bin[rowSums(taxus_bin) > 1, ]  # Calculating TDV result <- tdv(taxus_bin_wmt, groups)  # This is the TDV result$tdv #> [1] 0.1958471 # This is TDV1, reproducing exactly the value from the original article sum(result$diffval / result$e) / nrow(taxus_bin_wmt) #> [1] 0.1758473"},{"path":[]},{"path":"/news/index.html","id":"diffval-1109002","dir":"Changelog","previous_headings":"","what":"diffval 1.1.0.9002","title":"diffval 1.1.0.9002","text":"Improved documentation. Added function internal_assignment()","code":""},{"path":"/news/index.html","id":"diffval-1109001","dir":"Changelog","previous_headings":"","what":"diffval 1.1.0.9001","title":"diffval 1.1.0.9001","text":"Improved documentation.","code":""},{"path":"/news/index.html","id":"diffval-110","dir":"Changelog","previous_headings":"","what":"diffval 1.1.0","title":"diffval 1.1.0","text":"CRAN release: 2023-03-09","code":""},{"path":"/news/index.html","id":"major-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"diffval 1.1.0","text":"Function bigdata_tdv() added, allowing Total Differential Value calculation big matrices, optionally using fork package parallel. Two auxiliary functions added assist bigdata_tdv() utils.R.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"diffval 1.1.0","text":"Improved sorting tabulation() function. TDV calculation corrected cases optim_tdv_hill_climb() associated auxiliary function utils.R.","code":""},{"path":"/news/index.html","id":"diffval-100","dir":"Changelog","previous_headings":"","what":"diffval 1.0.0","title":"diffval 1.0.0","text":"CRAN release: 2022-11-14 Updated version, package release.","code":""},{"path":"/news/index.html","id":"diffval-0009025","dir":"Changelog","previous_headings":"","what":"diffval 0.0.0.9025","title":"diffval 0.0.0.9025","text":"Added NEWS.md file track changes package.","code":""}]
