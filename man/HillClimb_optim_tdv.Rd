% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HillClimb_optim_tdv.R
\name{HillClimb_optim_tdv}
\alias{HillClimb_optim_tdv}
\title{TotDiffVal1 optimization using hill climbing algorithms}
\usage{
HillClimb_optim_tdv(
  m,
  k,
  maxit = 10,
  p.ini = "random",
  min.g.size = 2,
  random.first = FALSE,
  rf.neigh.size = 1,
  rf.maxit = 500
)
}
\arguments{
\item{m}{A \code{matrix}, i.e. a phytosociological table of 0s (absences) and 1s (presences), where rows correspond to taxa and columns correspond to relevés.}

\item{k}{A \code{numeric}, giving the number of desired groups.}

\item{maxit}{A \code{numeric} giving the number of iterations of the hill-climbing optimization.}

\item{p.ini}{A \code{vector} of integer numbers with the initial partition of the relevés (i.e. a vector with values from 1 to k, with length equal to the number of columns of m, ascribing each relevé to one of the k groups). By default, "random", generates a random initial partition.}

\item{min.g.size}{A \code{numeric} The minimum number of relevés that a group can contain (must be 2 or higher).}

\item{random.first}{A \code{logical}. \code{FALSE} (the default), performs only hill-climbing on the 1-neighbours; \code{TRUE} first, performs a stochastic hill-climbing on random \code{n}-neighbours (\code{n} is definded by the parameter \code{rf.neigh.size}), and only after runs the hill-climbing search on the 1-neighbours; see description above.}

\item{rf.neigh.size}{A \code{numeric}, giving the size (\code{n}) of the \code{n}-neighbour for the stochastic hill-climbing; only used if \code{random.first} = \code{TRUE}.}

\item{rf.maxit}{A \code{numeric}, giving the number of iterations of the hill-climbing optimization; only used if \code{random.first} = \code{TRUE}.}
}
\value{
A \code{list} with the following components:

\describe{
\item{res.rf}{A \code{matrix} with the iteration number (of the stochastic hill-climbing phase), the maximum TotDiffVal1 found until that iteration, and the higher TotDiffVal1 among all 1-neighbours; a first line of zeros is being added at the beginning of the matrix, which should be removed in future.}
\item{par.rf}{A \code{vector} with the best partition found in the stochastic hill-climbing phase.}
\item{max.TotDiffVal1.rf}{A \code{numeric} showing the maximum TotDifVal1 found in the stochastic hill-climbing phase (if selected).}
\item{res}{A \code{matrix} with the iteration number (of the hill-climbing), the maximum TotDiffVal1 found until that iteration, and the higher TotDiffVal1 among all 1-neighbours; a first line of zeros is being added at the beginning of the matrix, which should be removed in future.}
\item{par}{A \code{vector} with the best partition found in the hill-climbing phase.}
\item{local_maximum}{A \code{logical} indicating if \code{par} is a 1-neighbour local maximum.}
\item{time}{The total amount of time of the run (from function \code{\link[base]{Sys.time}}).}
\item{max.TotDiffVal1}{A \code{numeric} with the maximum TotDifVal1 found in the run.}
}
}
\description{
This function searches for partitions of the columns of a given matrix, optimizing the TotDiffVal1 index.
}
\details{
Given a phytosociological table (\code{m}, rows corresponding to taxa and columns corresponding to relevés) this function searches for a k-partition (k, defined by the user) optimizing TotDiffVal1 index (see http://home.isa.utl.pt/~tmh/), i.e. searches, using a hill-climbing algorithm, for patterns of differential taxa by rearranging the relevés into k groups.

Optimization can start from a random partition (\code{p.ini} = "random"), or from a given partition (\code{p.ini}, defined by the user or produced by any clustering method, or even a manual classification).

Each iteration searches for a TotDiffVal1 improvement screening all 1-neighbours, until the given number of maximum iterations (\code{maxit}) is reached. A 1-neighbour of a given partition is another partition obtained by ascribing 1 relevé (of the original partition) to a different group.  A n-neighbour is obtained, equivalently, ascribing n relevés to different groups.

Optionally, a faster search (stochastic hill-climbing) can be performed in a first moment (\code{random.first} = \code{TRUE}), consisting on searching for TotDiffVal1 improvements, by randomly selecting n-neighbours (n defined by the user with the parameter \code{rf.neigh.size}), until a given number of maximum iterations (\code{rf.maxit}) is reached. Stochastic hill-climbing might be helpful for big tables (where the simple screening of all 1-neighbours might be too time consuming).

Several runs of HillClimb_optim_tdv (multi-starts) should be tried out, as several local maxima are usually present and the hill-climbing algorithm converges easily to local maxima. Sometimes, converging to a known high-valued partition is very unlikely, being dependent on data structure and on the initial partition.

Trimming your table by a 'constancy' range (see \code{\link{select_taxa}} function) or using the result of other cluster methodologies as input, might help finding interesting partitions. Specially after trimming the table by a 'constancy' range, getting a random initial partition with TotDiffVal1 greater than zero might be very unlike; on such cases using the result of other clustering strategies as input is useful.
}
\author{
Tiago Monteiro-Henriques. E-mail: \email{tiagomonteirohenriques@gmail.com}.
}
